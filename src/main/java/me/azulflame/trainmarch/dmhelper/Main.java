package me.azulflame.trainmarch.dmhelper;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Scanner;

import javax.security.auth.login.LoginException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.entities.Activity;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.requests.GatewayIntent;

public class Main extends ListenerAdapter {

    private static ArrayList<String> powerUsers = new ArrayList<>();

    private Logger log = LoggerFactory.getLogger(Main.class);

    // Loads the bot token, then starts the bot
    public static void main(String[] args) {
        String token = "";
        Scanner s;
        try {
            File f = new File("token");
            if (f.exists()) {
                s = new Scanner(f);
                token = s.nextLine();
                s.close();
            }
        } catch (IOException e) {
            System.out.println("Token file not found, attempting to use command line inputs");
        }

        Curses.load();
        WildMagic.load();
        DeathEffects.load();
        Commands.load();

        try {
            Scanner powerUserScanner = new Scanner(new File("power_users.txt"));
            while (powerUserScanner.hasNext()) {
                powerUsers.add(powerUserScanner.nextLine());
            }
        } catch (FileNotFoundException e) {
            System.out.println("Unable to load power user list, admin commands not enabled");
        }
        if (token.equals("")) {
            if (args.length < 1) {
                System.out.println("Token not found and is required");
                return;
            }
            token = args[0];
        }

        try {
            JDABuilder.createLight(token, GatewayIntent.GUILD_MESSAGES,
                    GatewayIntent.DIRECT_MESSAGES)
                    .addEventListeners(new Main())
                    .setActivity(Activity.playing("Type !ping"))
                    .build();
        } catch (LoginException exception) {
            System.out.print("Unable to log in, check your token or try again later");
        }
    }

    // This is the method called when a message is read in any channel
    @Override
    public void onMessageReceived(MessageReceivedEvent event) {
        String text = event.getMessage().getContentRaw().toLowerCase();

        // Staff-only commands
        if (powerUsers.contains(event.getAuthor().getId().toString())) {
            if (text.startsWith("!reload")) {
                Curses.load();
                WildMagic.load();
                DeathEffects.load();
                Commands.load();
                event.getMessage().reply("Reloaded lists").queue();
            }
        }

        // General user commands
        int command = Commands.resolve(text);

        if (command == Commands.CURSES) {
            event.getMessage().reply(Curses.get()).queue();
            log.info(Instant.now().atZone(ZoneOffset.UTC).toString() +
                    " Curse generated by " + event.getAuthor().getId() + " (" + event.getAuthor().getAsMention()
                    + " )");
        }
        if (command == Commands.WILD_MAGIC) {
            event.getMessage().reply(WildMagic.get()).queue();
            log.info(Instant.now().atZone(ZoneOffset.UTC).toString()
                    + " Wild Magic generated by " + event.getAuthor().getId() + " (" + event.getAuthor().getAsMention()
                    + " )");
        }
        if (command == Commands.DEATH_EFFECTS) {
            event.getMessage().reply(DeathEffects.get()).queue();
            log.info(Instant.now().atZone(ZoneOffset.UTC).toString()
                    + " Death Effect generated by " + event.getAuthor().getId() + " ("
                    + event.getAuthor().getAsMention()
                    + " )");
        }
        if (command == Commands.QUEST_CALCULATOR) {
            Quest quest = new Quest(text);
            String message = quest.getRewards();
            event.getMessage().reply(message).queue();
            log.info(Instant.now().atZone(ZoneOffset.UTC).toString()
                    + " Quest rewards generated by " + event.getAuthor().getId() + " ("
                    + event.getAuthor().getAsMention()
                    + " )");
        }
        if (command == Commands.TIME_CALCULATOR) {
            event.getMessage().reply(TimeConverter.getTime(text.substring(text.indexOf(" "))));
            log.info(Instant.now().atZone(ZoneOffset.UTC).toString() +
                    " Time calculated by " + event.getAuthor().getId() + " (" + event.getAuthor().getAsMention()
                    + " )");
        }
        if (command == Commands.MINIMUM_ITEMS) {
            event.getMessage().reply(MinimumItems.getMinimumItems(text)).queue();
            log.info(Instant.now().atZone(ZoneOffset.UTC).toString() + " Minimum rewards calculated by "
                    + event.getAuthor().getId() + " ("
                    + event.getAuthor().getAsMention() + " )");
        }
    }
}